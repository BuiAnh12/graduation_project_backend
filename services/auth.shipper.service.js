const Shipper = require("../models/shippers.model");
const Account = require("../models/accounts.model");
const Vehicle = require("../models/vehicles.model");
const ErrorCode = require("../constants/errorCodes.enum");
const sendEmail = require("../utils/sendEmail");
const crypto = require("crypto");
const mongoose = require("mongoose");
/**
 * 1Ô∏è‚É£ ƒêƒÉng k√Ω t√†i kho·∫£n Shipper m·ªõi
 */
const registerShipperService = async (payload) => {
  const {
    name,
    email,
    password,
    phonenumber,
    gender,
    vehicleNumber,
    vehicleType,
  } = payload;

  if (
    !name ||
    !email ||
    !password ||
    !phonenumber ||
    !gender ||
    !vehicleNumber ||
    !vehicleType
  ) {
    throw ErrorCode.MISSING_REQUIRED_FIELDS;
  }

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    // üîç Ki·ªÉm tra email tr√πng
    const existedEmail = await Shipper.findOne({ email }).session(session);
    if (existedEmail) throw ErrorCode.EMAIL_EXISTS;

    // üß© T·∫°o account
    const account = await Account.create([{ password }], { session });
    const accountId = account[0]._id;

    // üöó T·∫°o vehicle
    const vehicle = await Vehicle.create(
      [
        {
          vehicleNumber,
          vehicleType,
        },
      ],
      { session }
    );
    const vehicleId = vehicle[0]._id;

    // üë§ T·∫°o shipper
    const shipper = await Shipper.create(
      [
        {
          accountId,
          vehicleId,
          name,
          email,
          phonenumber,
          gender,
        },
      ],
      { session }
    );
    const shipperId = shipper[0]._id;

    await session.commitTransaction();
    session.endSession();

    // üîÅ Populate sau khi commit (ngo√†i transaction)
    return await Shipper.findById(shipperId)
      .populate("accountId")
      .populate("vehicleId")
      .populate("avatarImage");
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error("‚ùå Transaction failed:", error);
    throw error;
  }
};

/**
 * 2Ô∏è‚É£ L·∫•y th√¥ng tin profile Shipper
 */
const getProfileService = async (shipperId) => {
  if (!shipperId) throw ErrorCode.MISSING_REQUIRED_FIELDS;

  const shipper = await Shipper.findById(shipperId)
    .populate("accountId")
    .populate("vehicleId")
    .populate("avatarImage");

  if (!shipper) throw ErrorCode.SHIPPER_NOT_FOUND;

  return shipper;
};

/**
 * 3Ô∏è‚É£ C·∫≠p nh·∫≠t profile Shipper
 */
const updateProfileService = async (shipperId, payload) => {
  if (!shipperId) throw ErrorCode.MISSING_REQUIRED_FIELDS;

  const shipper = await Shipper.findById(shipperId);
  if (!shipper) throw ErrorCode.SHIPPER_NOT_FOUND;

  // N·∫øu ƒë·ªïi email ‚Üí check tr√πng
  if (payload.email && payload.email !== shipper.email) {
    const existedEmail = await Shipper.findOne({ email: payload.email });
    if (existedEmail) throw ErrorCode.EMAIL_EXISTS;
  }

  // C·∫≠p nh·∫≠t c√°c field c∆° b·∫£n
  if (payload.name) shipper.name = payload.name;
  if (payload.email) shipper.email = payload.email;
  if (payload.phonenumber) shipper.phonenumber = payload.phonenumber;
  if (payload.gender) shipper.gender = payload.gender;
  if (payload.avatarImage) shipper.avatarImage = payload.avatarImage;

  // N·∫øu c√≥ th√¥ng tin vehicle m·ªõi
  if (payload.vehicleNumber || payload.vehicleType || payload.vehicleColor) {
    let vehicle = null;

    // N·∫øu ƒë√£ c√≥ vehicle ‚Üí update
    if (shipper.vehicleId) {
      vehicle = await Vehicle.findById(shipper.vehicleId);
      if (!vehicle) throw ErrorCode.VEHICLE_NOT_FOUND;

      if (payload.vehicleNumber) vehicle.vehicleNumber = payload.vehicleNumber;
      if (payload.vehicleType) vehicle.vehicleType = payload.vehicleType;
      if (payload.vehicleColor) vehicle.vehicleColor = payload.vehicleColor;
      await vehicle.save();
    } else {
      // N·∫øu ch∆∞a c√≥ vehicle ‚Üí t·∫°o m·ªõi
      vehicle = await Vehicle.create({
        vehicleNumber: payload.vehicleNumber,
        vehicleType: payload.vehicleType,
        vehicleColor: payload.vehicleColor,
      });
      shipper.vehicleId = vehicle._id;
    }
  }

  await shipper.save();

  return await Shipper.findById(shipper._id)
    .populate("accountId")
    .populate("vehicleId")
    .populate("avatarImage");
};

/**
 * 4Ô∏è‚É£ Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
 */
const checkCurrentPasswordService = async (shipperId, currentPassword) => {
  if (!shipperId || !currentPassword) throw ErrorCode.MISSING_REQUIRED_FIELDS;

  const shipper = await Shipper.findById(shipperId).populate("accountId");
  if (!shipper) throw ErrorCode.SHIPPER_NOT_FOUND;

  const account = await Account.findById(shipper.accountId).select("+password");
  if (!account) throw ErrorCode.ACCOUNT_NOT_FOUND;

  const isMatch =
    typeof account.isPasswordMatched === "function"
      ? await account.isPasswordMatched(currentPassword)
      : false;

  return isMatch;
};

/**
 * 5Ô∏è‚É£ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
 */
const updatePasswordService = async (shipperId, { newPassword }) => {
  if (!shipperId || !newPassword) throw ErrorCode.MISSING_REQUIRED_FIELDS;

  const shipper = await Shipper.findById(shipperId);
  if (!shipper) throw ErrorCode.SHIPPER_NOT_FOUND;

  const account = await Account.findById(shipper.accountId);
  if (!account) throw ErrorCode.ACCOUNT_NOT_FOUND;

  account.password = newPassword;
  await account.save();

  return { success: true, message: "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng" };
};

/**
 * 6Ô∏è‚É£ Qu√™n m·∫≠t kh·∫©u (g·ª≠i OTP)
 */
const forgotPasswordService = async ({ email }) => {
  const shipper = await Shipper.findOne({ email });
  if (!shipper) throw ErrorCode.ACCOUNT_NOT_FOUND;

  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  const hashedOtp = crypto.createHash("sha256").update(otp).digest("hex");

  shipper.otp = hashedOtp;
  shipper.otpExpires = Date.now() + 2 * 60 * 1000;
  await shipper.save();

  const mailBody = `
    <div style="font-family: Arial, sans-serif; background-color: #f4f6f8; padding: 30px;">
      <div style="max-width: 500px; margin: auto; background-color: #ffffff; border-radius: 10px;">
        <div style="background-color: #2563eb; padding: 20px; text-align: center;">
          <h2 style="color: #ffffff; margin: 0;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
        </div>
        <div style="padding: 25px;">
          <p>Xin ch√†o ${shipper.name},</p>
          <p>M√£ OTP ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
          <h2 style="text-align:center; letter-spacing:4px;">${otp}</h2>
          <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>2 ph√∫t</strong>.</p>
        </div>
      </div>
    </div>
  `;

  await sendEmail({
    to: email,
    subject: "Qu√™n m·∫≠t kh·∫©u (Shipper)",
    html: mailBody,
  });

  return { success: true, message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n" };
};

/**
 * 7Ô∏è‚É£ X√°c minh OTP
 */
const verifyOtpService = async ({ email, otp }) => {
  if (!email || !otp) throw ErrorCode.MISSING_REQUIRED_FIELDS;

  const shipper = await Shipper.findOne({ email });
  if (!shipper) throw ErrorCode.ACCOUNT_NOT_FOUND;

  if (!shipper.otp || !shipper.otpExpires) throw ErrorCode.INVALID_OTP;
  if (Date.now() > shipper.otpExpires) throw ErrorCode.OTP_EXPIRED;

  const hashedOtp = crypto.createHash("sha256").update(otp).digest("hex");
  if (hashedOtp !== shipper.otp) throw ErrorCode.INVALID_OTP;

  return { success: true, message: "OTP h·ª£p l·ªá" };
};

/**
 * 8Ô∏è‚É£ Reset m·∫≠t kh·∫©u b·∫±ng email (sau khi OTP h·ª£p l·ªá)
 */
const resetPasswordWithEmailService = async ({ email, newPassword }) => {
  if (!email || !newPassword) throw ErrorCode.MISSING_REQUIRED_FIELDS;

  const shipper = await Shipper.findOne({ email });
  if (!shipper) throw ErrorCode.ACCOUNT_NOT_FOUND;

  const account = await Account.findById(shipper.accountId);
  if (!account) throw ErrorCode.ACCOUNT_NOT_FOUND;

  account.password = newPassword;
  await account.save();

  shipper.otp = null;
  shipper.otpExpires = null;
  await shipper.save();

  return { success: true, message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng" };
};

module.exports = {
  registerShipperService,
  getProfileService,
  updateProfileService,
  checkCurrentPasswordService,
  updatePasswordService,
  forgotPasswordService,
  verifyOtpService,
  resetPasswordWithEmailService,
};
